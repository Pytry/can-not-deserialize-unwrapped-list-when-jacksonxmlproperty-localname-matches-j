/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pytry.tests;

import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.junit.jupiter.api.Test;
import pytry.examples.AnnotatedElementIsNotTest;
import pytry.examples.AnnotatedElementIsTest;

import static com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertThrows;

class JacksonExamplesTest
{
  private final XmlMapper xmlMapper = XmlMapper
      .xmlBuilder()
      .serializationInclusion(NON_NULL)
      .build();

  //@formatter:off
  private static final String xml_root_element_is_test =
      "<test id=\"0\">" +
          "<test id=\"0.1\">" +
              "<test id=\"0.1.1\"/>" +
          "</test>" +
          "<test id=\"0.2\"/>" +
          "<test id=\"0.3\">" +
              "<test id=\"0.3.1\"/>" +
          "</test>" +
      "</test>";

  private static final String xml_root_element_is_not_test =
      "<whatever id=\"0\">" +
          "<test id=\"0.1\"/>" +
          "<test id=\"0.2\">" +
              "<test id=\"0.2.1\"/>" +
          "</test>" +
      "</whatever>";
  //@formatter:on

  @Test
  void child_elements_cannot_have_same_localname_as_root_xml_element()
  {
    assertThrows(JsonMappingException.class, () -> xmlMapper.readValue(xml_root_element_is_test, AnnotatedElementIsTest.class));
  }

  @Test
  void xml_root_can_be_different_from_annotated_root() throws Exception
  {
    AnnotatedElementIsTest testRoot = xmlMapper.readValue(xml_root_element_is_not_test, AnnotatedElementIsTest.class);
    //ROOT//
    assertEquals(0, testRoot.getExtraProperties().size());
    assertEquals("0", testRoot.getId());
    assertEquals(2, testRoot.getChildren().size());
    //CHILD 1//
    assertEquals(0, testRoot.getChildren().get(0).getExtraProperties().size());
    assertEquals("0.1", testRoot.getChildren().get(0).getId());
    assertNull(testRoot.getChildren().get(0).getChildren());
    //CHILD 2//
    assertEquals(0, testRoot.getChildren().get(1).getExtraProperties().size());
    assertEquals("0.2", testRoot.getChildren().get(1).getId());
    assertEquals(1, testRoot.getChildren().get(1).getChildren().size());
    //CHILD 2.1//
    assertEquals(0, testRoot.getChildren().get(1).getChildren().get(0).getExtraProperties().size());
    assertEquals("0.2.1", testRoot.getChildren().get(1).getChildren().get(0).getId());
    assertNull(testRoot.getChildren().get(1).getChildren().get(0).getChildren());
  }

  @Test
  void child_elements_cannot_have_same_localname_as_root_xml_element_even_when_the_annotated_root_is_different()
  {
    assertThrows(JsonMappingException.class, () -> xmlMapper.readValue(xml_root_element_is_test, AnnotatedElementIsNotTest.class));
  }

  @Test
  void when_annotated_root_and_actual_root_are_equal_then_serialization_should_work() throws Exception
  {
    AnnotatedElementIsNotTest testRoot = xmlMapper.readValue(xml_root_element_is_not_test, AnnotatedElementIsNotTest.class);
    //ROOT//
    assertEquals(0, testRoot.getExtraProperties().size());
    assertEquals("0", testRoot.getId());
    assertEquals(2, testRoot.getChildren().size());
    //CHILD 1//
    assertEquals(0, testRoot.getChildren().get(0).getExtraProperties().size());
    assertEquals("0.1", testRoot.getChildren().get(0).getId());
    assertNull(testRoot.getChildren().get(0).getChildren());
    //CHILD 2//
    assertEquals(0, testRoot.getChildren().get(1).getExtraProperties().size());
    assertEquals("0.2", testRoot.getChildren().get(1).getId());
    assertEquals(1, testRoot.getChildren().get(1).getChildren().size());
    //CHILD 2.1//
    assertEquals(0, testRoot.getChildren().get(1).getChildren().get(0).getExtraProperties().size());
    assertEquals("0.2.1", testRoot.getChildren().get(1).getChildren().get(0).getId());
    assertNull(testRoot.getChildren().get(1).getChildren().get(0).getChildren());
    //DESERIALIZATION EQUALITY CHECK//
    assertEquals(xml_root_element_is_not_test, xmlMapper.writeValueAsString(testRoot));
  }
}
